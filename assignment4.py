# -*- coding: utf-8 -*-
"""Assignment4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ijeemXvoFpXRRuupiTdjidvi2ViSBRTY

# Import statements and data upload
"""

!pip install -q kaggle
from google.colab import files
uploaded = files.upload() # upload the kaggle.json file

!mkdir ../root/.kaggle
!cp ../content/kaggle.json ../root/.kaggle

!kaggle competitions download -c winter2020-mais-202 --force

# unzip downloaded data 
!unzip train_images.npy.zip
!unzip test_images.npy.zip

# imports 
import numpy as np
import pandas as pd
import keras
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.layers.normalization import BatchNormalization
from keras.callbacks import EarlyStopping, ModelCheckpoint
from sklearn.model_selection import train_test_split

"""Set-up variables and data to be passed to the model"""

train_images = np.load("train_images.npy")
train_labels = pd.read_csv('train_labels.csv')
test_images = np.load("test_images.npy")

#one hot encode the training labels to binary array representation
y_train = to_categorical(np.array(train_labels)[:,1]) #(50000, 10)

#making a validation set
#TAKE OUT RANDOM STATE BEFORE FINAL SUBMISSION
X_train, X_val, y_train, y_val = train_test_split(train_images, y_train, test_size=0.2) #, random_state=13)

img_rows, img_columns = X_train.shape[1:] #28, 28
input_shape = (img_rows, img_columns, 1)
train_num_imgs = X_train.shape[0] # 40000
val_num_imgs = X_val.shape[0] # 10000
test_num_imgs = test_images.shape[0] # 20000


#reshape data to fit model
X_train = X_train.reshape(train_num_imgs,28,28,1)
X_val = X_val.reshape(val_num_imgs,28,28,1)
X_test = test_images.reshape(test_num_imgs,28,28,1)

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_val = X_val.astype('float32')
X_train /= 255
X_test /= 255
X_val /= 255

"""Visualizing Images"""

import matplotlib.pyplot as plt

def show_image(arr):
    two_d = (np.reshape(arr, (28, 28)) * 255).astype(np.uint8)
    plt.imshow(two_d, interpolation='nearest')
    plt.show()

for i in range(3):
  show_image(X_train[i]) # 0 is the index of the training image you want to display

"""# Creating and fitting the model

Creating the model
"""

batch_size = 256
num_classes = 10
#epochs = 50 gives us 0.8775 training acc
#epochs = 100 gives us 0.9018 training acc
epochs = 200
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 kernel_initializer='he_normal',
                 input_shape=input_shape))
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.25))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(Dropout(0.4))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(num_classes, activation='softmax'))

callbacks = [EarlyStopping(monitor='val_loss', patience=2),
             ModelCheckpoint(filepath='best_model.h5', monitor='val_loss', save_best_only=True)]
             
model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.adamax(),
              metrics=['accuracy'])

"""Training the model"""

history = model.fit(X_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(X_val, y_val), shuffle=True)
#Epoch 150/150
#40000/40000 - 38s 946us/step - loss: 0.2381 - acc: 0.9089 - val_loss: 0.3354 - val_acc: 0.8815

"""# Testing and Submitting

Testing!
"""

y_test = model.predict(X_test)

y_test_max_probs = np.amax(y_test, axis=1, keepdims=True)# finding max probabilities
y_test_labels = np.zeros(len(y_test))
for i,x in np.ndenumerate(y_test_max_probs): #finding label associated with max probability
  #print(i,x)
  y_test_labels[i[0]] = np.where(y_test[i[0]] == x)[0]
y_test_labels = y_test_labels.astype('int')


#creating the submission csv
df_test = pd.read_csv('sample_submission.csv')
df_test['label'] = y_test_labels
df_test.to_csv('submission.csv', index=False)

"""Only run this if you want to submit it"""

!kaggle competitions submit -c winter2020-mais-202 -f submission.csv -m "Message"